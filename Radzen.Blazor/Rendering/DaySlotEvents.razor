@using Radzen.Blazor

<div class="rz-events">
    @foreach (var kvp in Layout())
    {
        var appointment = kvp.Key;
        var rectangle = kvp.Value;
        <Appointment Data=@appointment Top=@rectangle.Top Left=@rectangle.Left Width=@rectangle.Width
            Height=@rectangle.Height Click=@OnAppointmentSelect />
    }
</div>

@code {
    [CascadingParameter]
    public IScheduler Scheduler { get; set; }

    [Parameter]
    public DateTime StartDate { get; set; }

    [Parameter]
    public DateTime EndDate { get; set; }

    [Parameter]
    public int MinutesPerSlot { get; set; }

    [Parameter]
    public IList<AppointmentData> Appointments { get; set; }

    async Task OnAppointmentSelect(AppointmentData data)
    {
        await Scheduler.SelectAppointment(data);
    }

    private IList<AppointmentData> Overlapping(IList<AppointmentData> appointments)
    {
        if (appointments.Count <= 1)
        {
            return appointments;
        }

        return appointments.Where(a => appointments.Any(b => a != b && a.Start < b.End && a.End > b.Start)).ToList();
    }

    private List<IList<AppointmentData>> PartitionAppointments()
    {
        var appointments = Scheduler.GetAppointmentsInRange(StartDate, EndDate)
                                    .OrderBy(e => e.Start)
                                    .ThenByDescending(e => e.End - e.Start)
                                    .ToArray();

        var partitions = new List<List<AppointmentData>>();

        foreach (var appointment in appointments)
        {
            var slotsOccupied = (int)Math.Ceiling((appointment.End - appointment.Start).TotalMinutes / MinutesPerSlot);

            for (var i = 0; i < slotsOccupied; i++)
            {
                var partitionIndex = (int)(appointment.Start - appointments[0].Start).TotalMinutes / MinutesPerSlot + i;

                while (partitions.Count <= partitionIndex)
                {
                    partitions.Add(new List<AppointmentData>());
                }

                partitions[partitionIndex].Add(appointment);
            }
        }

        return partitions.Select(Overlapping).ToList();
    }

    private IDictionary<AppointmentData, Rect> Layout()
    {
        var partitions = PartitionAppointments();

        var rectangles = new Dictionary<AppointmentData, Rect>();

        foreach (var appointments in partitions)
        {
            var previous = new Rect();

            foreach (var appointment in appointments)
            {
                if (!rectangles.TryGetValue(appointment, out var rectangle))
                {
                    var width = GetAppointmentWidth(partitions, appointment);
                    var start = appointment.Start < StartDate ? StartDate : appointment.Start;
                    var eventEnd = appointment.End > EndDate ? EndDate : appointment.End;
                    var length = start.Subtract(StartDate).TotalMinutes / MinutesPerSlot;
                    var top = 1.5 * length;
                    var height = Math.Max(1.5, 1.5 * eventEnd.Subtract(start).TotalHours * (60 / MinutesPerSlot));

                    rectangle = new Rect();

                    rectangle.Left = previous.Left + previous.Width;
                    rectangle.Width = previous.Width == 0 ? width : previous.Width;
                    rectangle.Top = top;
                    rectangle.Height = height;

                    rectangles[appointment] = rectangle;
                }

                previous = rectangle;
            }
        }

        return rectangles;
    }

    private static double GetAppointmentWidth(IList<IList<AppointmentData>> partitions, AppointmentData appointment)
    {
        var count = partitions.Where(appointments => appointments.Contains(appointment))
                              .Max(appointments => appointments.Count());

        return 90 / Math.Max(count, 1);
    }
}